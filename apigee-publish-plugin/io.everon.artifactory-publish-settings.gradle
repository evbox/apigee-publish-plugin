ext {
    repoUrl = 'https://everon.jfrog.io/everon'
    repoName = 'evo-maven'
    repoUsername = project.findProperty("artifactory_user") ?: 'deployer'
    repoPassword = project.findProperty("artifactory_password") ?: System.env['ARTIFACTORY_PUBLISH_PASS']
    artifactoryVersion = obtainArtifactVersion()

    artifactoryPublication = project.ext.has('artifactoryPublication') ? project.ext.artifactoryPublication : 'mavenJava'
}

artifactory {
    publish {
        contextUrl = repoUrl
        repository {
            repoKey = repoName
            username = repoUsername
            password = repoPassword
            maven = true
        }

        defaults {
            publications(artifactoryPublication)
            publishArtifacts = true
            publishPom = true
            publishIvy = false
        }
    }
}

if (plugins.hasPlugin(JavaPlugin)) {
    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar
            }
        }
    }
    publishing.publications."${artifactoryPublication}".version = artifactoryVersion
}

artifactoryPublish.onlyIf {
    !isArtifactAlreadyPublished()
}

def isArtifactAlreadyPublished() {
    def groupdId = publishing.publications."${artifactoryPublication}".groupId
    def artifactId = publishing.publications."${artifactoryPublication}".artifactId

    def artifactFileName = artifactId + '-' + artifactoryVersion + '.jar'
    def repositoryPath = groupdId.replace(".", "/") + "/" + artifactId + "/" + artifactoryVersion + "/" + artifactFileName
    def repositoryUrl = "$repoUrl/$repoName/${repositoryPath}"
    println("# searching for existing artifact with id '${artifactoryVersion}'")
    println("# artifact URL: " + repositoryUrl)
    println("")

    if (urlExists(repositoryUrl)) {
        println("# Artifact with version $artifactoryVersion already exist - increase the verion to publish")
        return true
    } else {
        println("# No existing artifact found. Proceeding to publish")
        return false
    }
}

def urlExists(String repositoryUrl) {
    try {
        def connection = (HttpURLConnection) new URL(repositoryUrl).openConnection()

        connection.setRequestProperty("Authorization", "Basic " + getBase64EncodedCredentials())
        connection.setConnectTimeout(10000)
        connection.setReadTimeout(10000)
        connection.setRequestMethod("HEAD")

        def responseCode = connection.getResponseCode()

        if (responseCode == 401) {
            throw new RuntimeException("Unauthorized MavenUser user. Please provide valid username and password.")
        }

        return (200 == responseCode)
    } catch (IOException ignored) {
        println(ignored)
        return false
    }
}

def getBase64EncodedCredentials() {
    def s = "$repoUsername" + ":" + "$repoPassword"
    return s.bytes.encodeBase64().toString()
}

/**
 * Return semantic version of the artifact.
 * <ul>
 * <li>For <b>master</b> branch: version from configuration file
 * <li>For <b>feature</b> branch: version from configuration file (or from <i>publishVersion</i> parameter if provided ) + feature branch name + build number (<i>buildNumber</i> parameter or Date  if build
 * param is not provided  )
 * </ul>
 * @return artifact version
 */
def obtainArtifactVersion() {
    def version = project.findProperty('publishVersion') ?: project.version
    def currentBranchName = getCurrentGitBranch()
    if (currentBranchName != 'master') {
        version += "-" + currentBranchName.replace(/\//, '-')
        def build = project.findProperty('buildNumber') ?: new Date().format('HHmmss')
        version += "." + build
    }
    return version
}

def getCurrentGitBranch() {
    def gitBranch = "Unknown branch"
    try {
        def isCiServer = System.getenv().containsKey("CIRCLECI")
        if (isCiServer) {
            return System.getenv().get("CIRCLE_BRANCH")
        }
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
        throw new RuntimeException('Cannot identify git branch name', e)
    }
    return gitBranch
}
